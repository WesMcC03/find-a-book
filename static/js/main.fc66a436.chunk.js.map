{"version":3,"sources":["components/Jumbotron/index.js","utils/API.js","components/DeleteBtn/index.js","components/Grid/index.js","components/BookList/index.js","components/Form/index.js","Searches/Books.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","_ref","children","react_default","a","createElement","style","height","clear","paddingTop","textAlign","className","BASEURL","APIKEY","API","getBooks","axios","get","getBook","id","deleteBook","delete","saveBook","bookData","post","DeleteBtn","props","Object","assign","role","tabIndex","Container","fluid","concat","Row","_ref2","Col","_ref3","size","split","map","join","BookList","BookListItem","Input","FormBtn","float","marginBottom","Books","state","books","loadBooks","then","res","_this","setState","data","catch","err","console","log","this","components_Jumbotron","name","placeholder","length","book","key","_id","href","title","author","components_DeleteBtn","Component","Nav","App","components_Nav","Searches_Books","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAceA,MAZf,SAAAC,GAAiC,IAAZC,EAAYD,EAAZC,SACnB,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,UACjEC,UAAU,aAGTT,oBCPDU,EAAU,+CACVC,EAAS,mDAEAC,EAAA,CAEXC,SAAU,WACR,OAAOC,IAAMC,IAAIL,EAAU,SAAWC,IAGxCK,QAAS,SAASC,GAChB,OAAOH,IAAMC,IAAIL,EAAUO,EAAKN,IAGlCO,WAAY,SAASD,GACnB,OAAOH,IAAMK,OAAOT,EAAUO,EAAKN,IAGrCS,SAAU,SAASC,GACjB,OAAOP,IAAMQ,KAAK,aAAcD,KCRvBE,MARf,SAAmBC,GACjB,OACEvB,EAAAC,EAAAC,cAAA,OAAAsB,OAAAC,OAAA,CAAMjB,UAAU,cAAiBe,EAAjC,CAAwCG,KAAK,SAASC,SAAS,MAA/D,WCHG,SAASC,EAAT9B,GAAwC,IAAnB+B,EAAmB/B,EAAnB+B,MAAO9B,EAAYD,EAAZC,SACjC,OAAOC,EAAAC,EAAAC,cAAA,OAAKM,UAAS,YAAAsB,OAAcD,EAAQ,SAAW,KAAO9B,GAIxD,SAASgC,EAATC,GAAkC,IAAnBH,EAAmBG,EAAnBH,MAAO9B,EAAYiC,EAAZjC,SAC3B,OAAOC,EAAAC,EAAAC,cAAA,OAAKM,UAAS,MAAAsB,OAAQD,EAAQ,SAAW,KAAO9B,GAIlD,SAASkC,EAATC,GAAiC,IAAlBC,EAAkBD,EAAlBC,KAAMpC,EAAYmC,EAAZnC,SAC1B,OACEC,EAAAC,EAAAC,cAAA,OACEM,UAAW2B,EACRC,MAAM,KACNC,IAAI,SAAAF,GAAI,MAAI,OAASA,IACrBG,KAAK,MAEPvC,GChBA,SAASwC,EAATzC,GAAgC,IAAZC,EAAYD,EAAZC,SACzB,OACEC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,2BACbR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,cAAcT,IAK3B,SAASyC,EAATR,GAAoC,IAAZjC,EAAYiC,EAAZjC,SAC7B,OAAOC,EAAAC,EAAAC,cAAA,MAAIM,UAAU,mBAAmBT,GCXnC,SAAS0C,EAAMlB,GACpB,OACEvB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cACbR,EAAAC,EAAAC,cAAA,QAAAsB,OAAAC,OAAA,CAAOjB,UAAU,gBAAmBe,KAOnC,SAASmB,EAAQnB,GACtB,OACEvB,EAAAC,EAAAC,cAAA,SAAAsB,OAAAC,OAAA,GAAYF,EAAZ,CAAmBpB,MAAO,CAAEwC,MAAO,QAASC,aAAc,IAAMpC,UAAU,oBACvEe,EAAMxB,cCkEQ8C,6MAvDbC,MAAQ,CACNC,MAAO,MAOTC,UAAY,WACVrC,EAAIC,WACDqC,KAAK,SAAAC,GAAG,OAAIC,EAAKC,SAAS,CAAEL,MAAOG,EAAIG,SACvCC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAN5BG,KAAKV,6CAUL,OACEhD,EAAAC,EAAAC,cAAC0B,EAAD,CAAWC,OAAK,GACd7B,EAAAC,EAAAC,cAAC6B,EAAD,KACE/B,EAAAC,EAAAC,cAAC+B,EAAD,CAAKE,KAAK,QACRnC,EAAAC,EAAAC,cAACyD,EAAD,KACE3D,EAAAC,EAAAC,cAAA,gCAEFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACuC,EAAD,CAAOmB,KAAK,QAAQC,YAAY,qBAChC7D,EAAAC,EAAAC,cAACuC,EAAD,CAAOmB,KAAK,SAASC,YAAY,sBACjC7D,EAAAC,EAAAC,cAACwC,EAAD,sBAGJ1C,EAAAC,EAAAC,cAAC+B,EAAD,CAAKE,KAAK,cACRnC,EAAAC,EAAAC,cAACyD,EAAD,KACE3D,EAAAC,EAAAC,cAAA,wBAEDwD,KAAKZ,MAAMC,MAAMe,OAChB9D,EAAAC,EAAAC,cAACqC,EAAD,KACGmB,KAAKZ,MAAMC,MAAMV,IAAI,SAAA0B,GAAI,OACxB/D,EAAAC,EAAAC,cAACsC,EAAD,CAAcwB,IAAKD,EAAKE,KACtBjE,EAAAC,EAAAC,cAAA,KAAGgE,KAAM,UAAYH,EAAKE,KACxBjE,EAAAC,EAAAC,cAAA,cACG6D,EAAKI,MADR,OACmBJ,EAAKK,SAG1BpE,EAAAC,EAAAC,cAACmE,EAAD,UAKNrE,EAAAC,EAAAC,cAAA,6CA/CAoE,aCdLC,MAVf,WACE,OACEvE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,sCACbR,EAAAC,EAAAC,cAAA,KAAGM,UAAU,eAAe0D,KAAK,KAAjC,oBCSSM,MATf,WACE,OACExE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACuE,EAAD,MACAzE,EAAAC,EAAAC,cAACwE,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.fc66a436.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n      className=\"jumbotron\"\n    >\n        \n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;","import axios from \"axios\";\n\nconst BASEURL = \"https://www.googleapis.com/books/v1/volumes/\"\nconst APIKEY = \"AIzaSyCC3WWtul2NhKLHso3htU-FB47tv_9vgqk&limit=10\"\n\nexport default {\n    // Gets all books\n    getBooks: function() {\n      return axios.get(BASEURL + \"batman\" + APIKEY);\n    },\n    // Gets the book with the given id\n    getBook: function(id) {\n      return axios.get(BASEURL + id + APIKEY);\n    },\n    // Deletes the book with the given id\n    deleteBook: function(id) {\n      return axios.delete(BASEURL + id + APIKEY);\n    },\n    // Saves a book to the database\n    saveBook: function(bookData) {\n      return axios.post(\"/api/books\", bookData);\n    }\n  };","import React from \"react\";\n\n\n\nfunction DeleteBtn(props) {\n  return (\n    <span className=\"delete-btn\" {...props} role=\"button\" tabIndex=\"0\">\n      âœ—\n    </span>\n  );\n}\n\nexport default DeleteBtn;","import React from \"react\";\n\n\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}","import React from \"react\";\n\n\n\n\nexport function BookList({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">{children}</ul>\n    </div>\n  );\n}\n\nexport function BookListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n","import React from \"react\";\n\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\n\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\n      {props.children}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { BookList, BookListItem } from \"../components/BookList\";\nimport { Input, FormBtn } from \"../components/Form\";\n\n// class Books extends Component {\n//     state = {\n//       books: []\n//     };\n\n//     render() {\n//         return(\n// <Jumbotron> \n// <h1> Welcome to \"Find-A-Book\" </h1>\n// </Jumbotron>\n//         )}\n\n\n\n// };\n\n// export default Books;\n\nclass Books extends Component {\n        state = {\n          books: []\n        };\n      \n        componentDidMount() {\n          this.loadBooks();\n        }\n      \n        loadBooks = () => {\n          API.getBooks()\n            .then(res => this.setState({ books: res.data }))\n            .catch(err => console.log(err));\n        };\n      \n        render() {\n          return (\n            <Container fluid>\n              <Row>\n                <Col size=\"md-6\">\n                  <Jumbotron>\n                    <h1>Search Your Book!</h1>\n                  </Jumbotron>\n                  <form>\n                    <Input name=\"title\" placeholder=\"Title (required)\" />\n                    <Input name=\"author\" placeholder=\"Author (required)\" />\n                    <FormBtn>Submit Book</FormBtn>\n                  </form>\n                </Col>\n                <Col size=\"md-6 sm-12\">\n                  <Jumbotron>\n                    <h1>Book List</h1>\n                  </Jumbotron>\n                  {this.state.books.length ? (\n                    <BookList>\n                      {this.state.books.map(book => (\n                        <BookListItem key={book._id}>\n                          <a href={\"/books/\" + book._id}>\n                            <strong>\n                              {book.title} by {book.author}\n                            </strong>\n                          </a>\n                          <DeleteBtn />\n                        </BookListItem>\n                      ))}\n                    </BookList>\n                  ) : (\n                    <h3>No Results to Display</h3>\n                  )}\n                </Col>\n              </Row>\n            </Container>\n          );\n        }\n      }\n      \n      export default Books;\n  \n","import React from \"react\";\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg  bg-danger\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Books to Read!\n      </a>\n    </nav>\n  );\n}\n\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport Books from \"./Searches/Books\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Books />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}